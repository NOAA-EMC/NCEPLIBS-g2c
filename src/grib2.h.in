/** @file
 * @brief Header file for NCEPLIBS-g2c library.
 *
 * ### Program History Log
 * Date | Programmer | Comments
 * -----|------------|---------
 * 2002-10-25 | Gilbert | Initial
 * 2009-01-14 | Vuong | Changed struct template to gtemplate
 *
 * @author Stephen Gilbert @date 2002-10-25
 */

#ifndef _grib2_H
#define _grib2_H
#include <stdio.h>
#include <stdint.h>

#define G2_VERSION "g2clib-@pVersion@" /**< Current version of NCEPLIBS-g2c library. */

typedef int64_t g2int; /**< Long integer type. */
typedef uint64_t g2intu; /**< Unsigned long integer type. */
typedef float g2float; /**< Float type. */

/**
 * Struct for GRIB template.
 */
struct gtemplate
{
    /** The template type:
     * 3 Grid Defintion Template.
     * 4 Product Defintion Template.
     * 5 Data Representation Template. */
    g2int type;

    g2int num; /**< The template number. */

    /** Number of entries in the static part of the template. */
    g2int maplen;

    /** Number of octets of each entry in the static part of the
     * template. */
    g2int *map;

    /** Indicates whether or not the template needs to be extended. */
    g2int needext;

    /** Number of entries in the template extension. */
    g2int extlen;

    /** Number of octets of each entry in the extension part of the
     * template. */
    g2int *ext;
};

typedef struct gtemplate gtemplate; /**< Struct for GRIB template. */

/**
 * Struct for GRIB field.
 */
struct gribfield
{
    /** GRIB edition number (2). */
    g2int version;

    /** Message Discipline (see [Table
     * 0.0](https://www.nco.ncep.noaa.gov/pmb/docs/grib2/grib2_doc/grib2_table0-0.shtml)). */
    g2int discipline;

    /** Contains the entries in the [Identification Section (Section
     * 1)](https://www.nco.ncep.noaa.gov/pmb/docs/grib2/grib2_doc/grib2_sect1.shtml).
     *
     * - idsect[0] Identification of originating Centre (see [Table
     * 0](https://www.nco.ncep.noaa.gov/pmb/docs/on388/table0.html)). 7
     * is the identification for the US National Weather Service.
     * - idsect[1] Identification of originating Sub-centre. (See
     * [Table
     * C](https://www.nco.ncep.noaa.gov/pmb/docs/on388/tablec.html)).
     * - idsect[2] GRIB Master Tables Version Number (see [Table
     * 1.0](https://www.nco.ncep.noaa.gov/pmb/docs/grib2/grib2_doc/grib2_table1-0.shtml)).
     *   - 0 Experimental
     *   - 1 Initial operational version number
     * - idsect[3] GRIB Local Tables Version Number (see [Table
     * 1.1](https://www.nco.ncep.noaa.gov/pmb/docs/grib2/grib2_doc/grib2_table1-1.shtml)).
     *   - 0 Local tables not used
     *   - 1-254 Number of local tables version used
     * - idsect[4] Significance of Reference Time (See [Table
     * 1.2](https://www.nco.ncep.noaa.gov/pmb/docs/grib2/grib2_doc/grib2_table1-2.shtml)).
     *   - 0 Analysis
     *   - 1 Start of forecast
     *   - 2 Verifying time of forecast
     *   - 3 Observation time
     * - idsect[5] Year (4 digits)
     * - idsect[6] Month
     * - idsect[7) Day
     * - idsect[8] Hour
     * - idsect[9] Minute
     * - idsect[10] Second
     * - idsect[11] Production status of processed data (see [Table
     * 1.3](https://www.nco.ncep.noaa.gov/pmb/docs/grib2/grib2_doc/grib2_table1-3.shtml)).
     *   - 0 Operational products
     *   - 1 Operational test products
     *   - 2 Research products
     *   - 3 Re-analysis products
     * - idsect[12] Type of processed data (see [Table
     * 1.4](https://www.nco.ncep.noaa.gov/pmb/docs/grib2/grib2_doc/grib2_table1-4.shtml)).
     *   - 0 Analysis products
     *   - 1 Forecast products
     *   - 2 Analysis and forecast products
     *   - 3 Control forecast products
     *   - 4 Perturbed forecast products
     *   - 5 Control and perturbed forecast products
     *   - 6 Processed satellite observations
     *   - 7 Processed radar observations
     */
    g2int *idsect;

    /** Number of elements in idsect. */
    g2int idsectlen;

    /** Pointer to character array containing contents of Local
     * Section 2, if included. */
    unsigned char *local;

    /** Length of array local. */
    g2int locallen;

    /** Field number within GRIB message. */
    g2int ifldnum;

    /** Source of grid definition (see [Table
     * 3.0](https://www.nco.ncep.noaa.gov/pmb/docs/grib2/grib2_doc/grib2_table3-0.shtml)).
     * - 0 Specified in [Table
     3.1](https://www.nco.ncep.noaa.gov/pmb/docs/grib2/grib2_doc/grib2_table3-1.shtml).
     *  - 1 Predetermined grid Defined by originating centre. */
    g2int griddef;

    /** Number of grid points in the defined grid. */
    g2int ngrdpts;

    /** Number of octets needed for each additional grid points
     * definition. Used to define number of points in each row (or
     * column) for non-regular grids. = 0, if using regular grid. */
    g2int numoct_opt;

    /** Interpretation of list for optional points definition. (See
     * [Table
     * 3.11](https://www.nco.ncep.noaa.gov/pmb/docs/grib2/grib2_doc/grib2_table3-11.shtml)). */
    g2int interp_opt;

    /** (Used if numoct_opt .ne. 0) The number of entries in array
     * ideflist - i.e. number of rows (or columns) for which optional
     * grid points are defined. This value is set to zero, if
     * numoct_opt=0. */
    g2int num_opt;

    /**  (Used if numoct_opt .ne. 0) This array contains the
     *  number of grid points contained in each row (or column) (part
     *  of Section 3). NULL if numoct_opt = 0. */
    g2int *list_opt;

    /** Grid Definition Template Number (See [Table
     * 3.1](https://www.nco.ncep.noaa.gov/pmb/docs/grib2/grib2_doc/grib2_table3-1.shtml)). */
    g2int igdtnum;

    /** Number of elements in igdtmpl - i.e. number of entries
     * in Grid Defintion Template. */
    g2int igdtlen;

    /** Contains the data values for the Grid Definition Template
     * specified by igdtnum. */
    g2int *igdtmpl;

    /** Product Definition Template Number (see
     * [Table 4.0](https://www.nco.ncep.noaa.gov/pmb/docs/grib2/grib2_doc/grib2_table4-0.shtml)). */
    g2int ipdtnum;

    /** Number of elements in ipdtmpl - i.e. number of entries in
     * Product Defintion Template. */
    g2int ipdtlen;

    /** Contains the data values for the Product Definition Template
     * specified by ipdtnum. */
    g2int *ipdtmpl;

    /** Number of values in array coord_list. */
    g2int num_coord;

    /** Array containing floating point values intended to document
     * the vertical discretisation associated to model data on hybrid
     * coordinate vertical levels (part of Section 4). */
    g2float *coord_list;

    /** Number of data points unpacked and returned. */
    g2int ndpts;

    /** Data Representation Template Number (see [Table
     * 5.0](https://www.nco.ncep.noaa.gov/pmb/docs/grib2/grib2_doc/grib2_table5-0.shtml)). */
    g2int idrtnum;

    /** Number of elements in idrtmpl. */
    g2int idrtlen;

    /** Contains the data values for the Data Representation Template
     * specified by idrtnum. */
    g2int *idrtmpl;

    /** Logical value indicating whether the bitmap and data values
     * were unpacked. If false, bmap and fld pointers are NULL. */
    g2int unpacked;

    /** Logical value indicating whether the data field was expanded
     * to the grid in the case where a bit-map is present. If true,
     * the data points in fld match the grid points and zeros were
     * inserted at grid points where data was bit-mapped out. If
     * false, the data values in ld were not expanded to the grid and
     * are just a consecutive array of data points corresponding to
     * each value of "1" in bmap. */
    g2int expanded;

    /** Bitmap indicator (see [Table
     * 6.0](https://www.nco.ncep.noaa.gov/pmb/docs/grib2/grib2_doc/grib2_table6-0.shtml)).
     * - 0 bitmap applies and is included in Section 6.
     * - 1-253 = Predefined bitmap applies
     * - 254 = Previously defined bitmap applies to this field
     * - 255 = Bit map does not apply to this product. */
    g2int ibmap;

    /** Integer array containing decoded bitmap, if ibmap=0 or
     * ibap=254. Otherwise NULL. */
    g2int *bmap;

    /** Array of ndpts unpacked data points. */
    g2float *fld;
};

typedef struct gribfield gribfield; /**< Struct for GRIB field. */

/*  Prototypes for unpacking sections API  */
g2int g2_unpack1(unsigned char *cgrib, g2int *iofst, g2int **ids, g2int *idslen);
g2int g2_unpack2(unsigned char *cgrib, g2int *iofst, g2int *lencsec2,
                 unsigned char **csec2);
g2int g2_unpack3(unsigned char *cgrib, g2int *iofst, g2int **igds, g2int **igdstmpl,
                 g2int *mapgridlen, g2int **ideflist, g2int *idefnum);
g2int g2_unpack4(unsigned char *cgrib, g2int *iofst, g2int *ipdsnum, g2int **ipdstmpl,
                 g2int *mappdslen, g2float **coordlist, g2int *numcoord);
g2int g2_unpack5(unsigned char *cgrib, g2int *iofst, g2int *ndpts, g2int *idrsnum,
                 g2int **idrstmpl, g2int *mapdrslen);
g2int g2_unpack6(unsigned char *cgrib, g2int *iofst, g2int ngpts, g2int *ibmap,
                 g2int **bmap);
g2int g2_unpack7(unsigned char *cgrib, g2int *iofst, g2int igdsnum, g2int *igdstmpl,
                 g2int idrsnum, g2int *idrstmpl, g2int ndpts, g2float **fld);

/*  Prototypes for unpacking API  */
void seekgb(FILE *, g2int , g2int , g2int *, g2int *);
g2int g2_info(unsigned char *, g2int *, g2int *, g2int *, g2int *);
g2int g2_getfld(unsigned char *, g2int , g2int , g2int , gribfield **);
void g2_free(gribfield *);

/*  Prototypes for packing API  */
g2int g2_create(unsigned char *, g2int *, g2int *);
g2int g2_addlocal(unsigned char *, unsigned char *, g2int);
g2int g2_addgrid(unsigned char *, g2int *, g2int *, g2int *, g2int);
g2int g2_addfield(unsigned char *, g2int , g2int *,
                  g2float *, g2int , g2int , g2int *,
                  g2float *, g2int , g2int , g2int *);
g2int g2_gribend(unsigned char *);

/*  Prototypes for supporting routines  */
extern double int_power(double,  g2int);
extern void mkieee(g2float *, g2int *, g2int);
void rdieee(g2int *, g2float *, g2int);
extern gtemplate *getpdstemplate(g2int);
extern gtemplate *extpdstemplate(g2int, g2int *);
extern gtemplate *getdrstemplate(g2int);
extern gtemplate *extdrstemplate(g2int, g2int *);
extern gtemplate *getgridtemplate(g2int);
extern gtemplate *extgridtemplate(g2int, g2int *);
extern void simpack(g2float *, g2int, g2int *, unsigned char *, g2int *);
extern void compack(g2float *, g2int, g2int, g2int *, unsigned char *, g2int *);
void misspack(g2float *, g2int , g2int , g2int *,  unsigned char *,  g2int *);
void gbit(unsigned char *, g2int *, g2int , g2int);
void sbit(unsigned char *, g2int *, g2int , g2int);
void gbits(unsigned char *, g2int *, g2int , g2int , g2int , g2int);
void sbits(unsigned char *, g2int *, g2int , g2int , g2int , g2int);

int pack_gp(g2int *,  g2int *,  g2int *,
            g2int *,  g2int *,  g2int *,  g2int *,  g2int *,
            g2int *,  g2int *,  g2int *,  g2int *,
            g2int *,  g2int *,  g2int *,  g2int *,  g2int *,
            g2int *,  g2int *,  g2int *);

#endif  /*  _grib2_H  */
