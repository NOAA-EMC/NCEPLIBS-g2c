/** @file
 * @brief Header file for NCEPLIBS-g2c library.
 *
 * ### Program History Log
 * Date | Programmer | Comments
 * -----|------------|---------
 * 2002-10-25 | Gilbert | Initial
 * 2009-01-14 | Vuong | Changed struct template to gtemplate
 * 2021-11-9 | Ed Hartnett | Moved many prototypes to new internal header grib2_int.h.
 * 2022-04-15 | Ed Hartnett | Added error codes related to JPEG.
 * 2022-08-15 | Ed Hartnett | Added compression functions for double.
 *
 * @author Stephen Gilbert @date 2002-10-25
 * @author Ed Hartnett
 */

#ifndef _grib2_H
#define _grib2_H
#include <stdio.h>
#include <stdint.h>

#define G2_VERSION "@pVersion@" /**< Current version of NCEPLIBS-g2c library. */

#cmakedefine G2_PNG_ENABLED 1 /**< Decoding/encoding PNG is enabled */
#cmakedefine G2_JPEG2000_ENABLED 1 /**< Decoding/encoding JPEG2000 is enabled */

/** Long integer type. */
typedef int64_t g2int; 

/** Unsigned long integer type. This typedef is provided for backward
 * compatibility and is not used by the library any more. */
typedef uint64_t g2intu; 

/** Float type. This typedef is provided for backward compatibility
 * and is not used by the library any more. Use float in new code. */
typedef float g2float;

/**
 * Struct for GRIB field.
 */
struct gribfield
{
    /** GRIB edition number (2). */
    g2int version;

    /** Message Discipline (see [Table
     * 0.0](https://www.nco.ncep.noaa.gov/pmb/docs/grib2/grib2_doc/grib2_table0-0.shtml)). */
    g2int discipline;

    /** Contains the entries in the [Identification Section (Section
     * 1)](https://www.nco.ncep.noaa.gov/pmb/docs/grib2/grib2_doc/grib2_sect1.shtml).
     *
     * - idsect[0] Identification of originating Centre (see [Table
     * 0](https://www.nco.ncep.noaa.gov/pmb/docs/on388/table0.html)). 7
     * is the identification for the US National Weather Service.
     * - idsect[1] Identification of originating Sub-centre. (See
     * [Table
     * C](https://www.nco.ncep.noaa.gov/pmb/docs/on388/tablec.html)).
     * - idsect[2] GRIB Master Tables Version Number (see [Table
     * 1.0](https://www.nco.ncep.noaa.gov/pmb/docs/grib2/grib2_doc/grib2_table1-0.shtml)).
     *   - 0 Experimental
     *   - 1 Initial operational version number
     * - idsect[3] GRIB Local Tables Version Number (see [Table
     * 1.1](https://www.nco.ncep.noaa.gov/pmb/docs/grib2/grib2_doc/grib2_table1-1.shtml)).
     *   - 0 Local tables not used
     *   - 1-254 Number of local tables version used
     * - idsect[4] Significance of Reference Time (See [Table
     * 1.2](https://www.nco.ncep.noaa.gov/pmb/docs/grib2/grib2_doc/grib2_table1-2.shtml)).
     *   - 0 Analysis
     *   - 1 Start of forecast
     *   - 2 Verifying time of forecast
     *   - 3 Observation time
     * - idsect[5] Year (4 digits)
     * - idsect[6] Month
     * - idsect[7) Day
     * - idsect[8] Hour
     * - idsect[9] Minute
     * - idsect[10] Second
     * - idsect[11] Production status of processed data (see [Table
     * 1.3](https://www.nco.ncep.noaa.gov/pmb/docs/grib2/grib2_doc/grib2_table1-3.shtml)).
     *   - 0 Operational products
     *   - 1 Operational test products
     *   - 2 Research products
     *   - 3 Re-analysis products
     * - idsect[12] Type of processed data (see [Table
     * 1.4](https://www.nco.ncep.noaa.gov/pmb/docs/grib2/grib2_doc/grib2_table1-4.shtml)).
     *   - 0 Analysis products
     *   - 1 Forecast products
     *   - 2 Analysis and forecast products
     *   - 3 Control forecast products
     *   - 4 Perturbed forecast products
     *   - 5 Control and perturbed forecast products
     *   - 6 Processed satellite observations
     *   - 7 Processed radar observations
     */
    g2int *idsect;

    /** Number of elements in idsect. */
    g2int idsectlen;

    /** Pointer to character array containing contents of Local
     * Section 2, if included. */
    unsigned char *local;

    /** Length of array local. */
    g2int locallen;

    /** Field number within GRIB message. */
    g2int ifldnum;

    /** Source of grid definition (see [Table
     * 3.0](https://www.nco.ncep.noaa.gov/pmb/docs/grib2/grib2_doc/grib2_table3-0.shtml)).
     * - 0 Specified in [Table
     3.1](https://www.nco.ncep.noaa.gov/pmb/docs/grib2/grib2_doc/grib2_table3-1.shtml).
     *  - 1 Predetermined grid Defined by originating centre. */
    g2int griddef;

    /** Number of grid points in the defined grid. */
    g2int ngrdpts;

    /** Number of octets needed for each additional grid points
     * definition. Used to define number of points in each row (or
     * column) for non-regular grids. = 0, if using regular grid. */
    g2int numoct_opt;

    /** Interpretation of list for optional points definition. (See
     * [Table
     * 3.11](https://www.nco.ncep.noaa.gov/pmb/docs/grib2/grib2_doc/grib2_table3-11.shtml)). */
    g2int interp_opt;

    /** (Used if numoct_opt .ne. 0) The number of entries in array
     * ideflist - i.e. number of rows (or columns) for which optional
     * grid points are defined. This value is set to zero, if
     * numoct_opt=0. */
    g2int num_opt;

    /**  (Used if numoct_opt .ne. 0) This array contains the
     *  number of grid points contained in each row (or column) (part
     *  of Section 3). NULL if numoct_opt = 0. */
    g2int *list_opt;

    /** Grid Definition Template Number (See [Table
     * 3.1](https://www.nco.ncep.noaa.gov/pmb/docs/grib2/grib2_doc/grib2_table3-1.shtml)). */
    g2int igdtnum;

    /** Number of elements in igdtmpl - i.e. number of entries
     * in Grid Defintion Template. */
    g2int igdtlen;

    /** Contains the data values for the Grid Definition Template
     * specified by igdtnum. */
    g2int *igdtmpl;

    /** Product Definition Template Number (see
     * [Table 4.0](https://www.nco.ncep.noaa.gov/pmb/docs/grib2/grib2_doc/grib2_table4-0.shtml)). */
    g2int ipdtnum;

    /** Number of elements in ipdtmpl - i.e. number of entries in
     * Product Defintion Template. */
    g2int ipdtlen;

    /** Contains the data values for the Product Definition Template
     * specified by ipdtnum. */
    g2int *ipdtmpl;

    /** Number of values in array coord_list. */
    g2int num_coord;

    /** Array containing floating point values intended to document
     * the vertical discretisation associated to model data on hybrid
     * coordinate vertical levels (part of Section 4). */
    float *coord_list;

    /** Number of data points unpacked and returned. */
    g2int ndpts;

    /** Data Representation Template Number (see [Table
     * 5.0](https://www.nco.ncep.noaa.gov/pmb/docs/grib2/grib2_doc/grib2_table5-0.shtml)). */
    g2int idrtnum;

    /** Number of elements in idrtmpl. */
    g2int idrtlen;

    /** Contains the data values for the Data Representation Template
     * specified by idrtnum. */
    g2int *idrtmpl;

    /** Logical value indicating whether the bitmap and data values
     * were unpacked. If false, bmap and fld pointers are NULL. */
    g2int unpacked;

    /** Logical value indicating whether the data field was expanded
     * to the grid in the case where a bit-map is present. If true,
     * the data points in fld match the grid points and zeros were
     * inserted at grid points where data was bit-mapped out. If
     * false, the data values in ld were not expanded to the grid and
     * are just a consecutive array of data points corresponding to
     * each value of "1" in bmap. */
    g2int expanded;

    /** Bitmap indicator (see [Table
     * 6.0](https://www.nco.ncep.noaa.gov/pmb/docs/grib2/grib2_doc/grib2_table6-0.shtml)).
     * - 0 bitmap applies and is included in Section 6.
     * - 1-253 = Predefined bitmap applies
     * - 254 = Previously defined bitmap applies to this field
     * - 255 = Bit map does not apply to this product. */
    g2int ibmap;

    /** Integer array containing decoded bitmap, if ibmap=0 or
     * ibap=254. Otherwise NULL. */
    g2int *bmap;

    /** Array of ndpts unpacked data points. */
    float *fld;
};

typedef struct gribfield gribfield; /**< Struct for GRIB field. */

/*  Prototypes for unpacking sections API  */
g2int g2_unpack1(unsigned char *cgrib, g2int *iofst, g2int **ids, g2int *idslen);
g2int g2_unpack2(unsigned char *cgrib, g2int *iofst, g2int *lencsec2,
                 unsigned char **csec2);
g2int g2_unpack3(unsigned char *cgrib, g2int *iofst, g2int **igds, g2int **igdstmpl,
                 g2int *mapgridlen, g2int **ideflist, g2int *idefnum);
g2int g2_unpack4(unsigned char *cgrib, g2int *iofst, g2int *ipdsnum, g2int **ipdstmpl,
                 g2int *mappdslen, float **coordlist, g2int *numcoord);
g2int g2_unpack5(unsigned char *cgrib, g2int *iofst, g2int *ndpts, g2int *idrsnum,
                 g2int **idrstmpl, g2int *mapdrslen);
g2int g2_unpack6(unsigned char *cgrib, g2int *iofst, g2int ngpts, g2int *ibmap,
                 g2int **bmap);
g2int g2_unpack7(unsigned char *cgrib, g2int *iofst, g2int igdsnum, g2int *igdstmpl,
                 g2int idrsnum, g2int *idrstmpl, g2int ndpts, float **fld);

/*  Prototypes for unpacking API  */
void seekgb(FILE *lugb, g2int iseek, g2int mseek, g2int *lskip,
            g2int *lgrib);
g2int g2_info(unsigned char *cgrib, g2int *listsec0, g2int *listsec1,
              g2int *numfields, g2int *numlocal);
g2int g2_getfld(unsigned char *cgrib, g2int ifldnum, g2int unpack, g2int expand,
                gribfield **gfld);
void g2_free(gribfield *gfld);

/*  Prototypes for packing API  */
g2int g2_create(unsigned char *cgrib, g2int *listsec0, g2int *listsec1);
g2int g2_addlocal(unsigned char *cgrib, unsigned char *csec2, g2int lcsec2);
g2int g2_addgrid(unsigned char *cgrib, g2int *igds, g2int *igdstmpl, g2int *ideflist,
                 g2int idefnum);
g2int g2_addfield(unsigned char *cgrib, g2int ipdsnum, g2int *ipdstmpl,
                  float *coordlist, g2int numcoord, g2int idrsnum, g2int *idrstmpl,
                  float *fld, g2int ngrdpts, g2int ibmap, g2int *bmap);
g2int g2_gribend(unsigned char *cgrib);

/* Compression. */
void pngpack(float *fld, g2int width, g2int height, g2int *idrstmpl,
             unsigned char *cpack, g2int *lcpack);
g2int pngunpack(unsigned char *cpack, g2int len, g2int *idrstmpl, g2int ndpts,
                float *fld);
void pngpackd(double *fld, g2int width, g2int height, g2int *idrstmpl,
             unsigned char *cpack, g2int *lcpack);
g2int pngunpackd(unsigned char *cpack, g2int len, g2int *idrstmpl, g2int ndpts,
                double *fld);
void jpcpack(float *fld, g2int width, g2int height, g2int *idrstmpl,
             unsigned char *cpack, g2int *lcpack);
g2int jpcunpack(unsigned char *cpack, g2int len, g2int *idrstmpl, g2int ndpts,
                float *fld);
void jpcpackd(double *fld, g2int width, g2int height, g2int *idrstmpl,
             unsigned char *cpack, g2int *lcpack);
g2int jpcunpackd(unsigned char *cpack, g2int len, g2int *idrstmpl, g2int ndpts,
                double *fld);

/* Logging, for debugging purposes. */
int g2c_set_log_level(int new_level);

/* Error codes for G2 API. */
#define G2_NO_ERROR 0             /**< Function succeeded. */
#define G2_CREATE_GRIB_VERSION -1 /**< Wrong GRIB version for g2_create(), must be 2. */
#define G2_INFO_NO_GRIB 1         /**< g2_info() can't find beginning characters "GRIB". */
#define G2_INFO_GRIB_VERSION 2    /**< Wrong GRIB version for g2_info(), must be 2. */
#define G2_INFO_NO_SEC1 3         /**< g2_info() can't find section 1. */
#define G2_INFO_WRONG_END 4       /**< g2_info() found "7777" not where expected. */
#define G2_INFO_BAD_END 5         /**< g2_info() didn't find "7777" at end of message. */
#define G2_INFO_INVAL_SEC 6       /**< g2_info() found invalid section number. */
#define G2_GETFLD_NO_GRIB 1       /**< g2_getfld() can't find beginning characters "GRIB". */
#define G2_GETFLD_GRIB_VERSION 2  /**< Wrong GRIB version for g2_getfld(), must be 2. */
#define G2_GETFLD_INVAL 3         /**< g2_getfld() data field request number was not positive. */
#define G2_GETFLD_WRONG_END 4     /**< g2_info() found "7777" not where expected. */
#define G2_GETFLD_WRONG_NFLDS 6   /**< In g2_getfld() message did not contain the requested number of data fields. */
#define G2_GETFLD_BAD_END 7       /**< g2_getfld() didn't find "7777" at end of message. */
#define G2_GETFLD_INVAL_SEC 8     /**< g2_getfld() encountered unrecognized section. */
#define G2_GETFLD_NO_DRT 9        /**< In g2_getfld(), Data Representation Template not implemented.*/
#define G2_GETFLD_BAD_SEC1 15     /**< Error in g2_getfld() unpacking section 1. */
#define G2_GETFLD_BAD_SEC2 16     /**< Error in g2_getfld() unpacking section 2. */
#define G2_GETFLD_BAD_SEC3 10     /**< Error in g2_getfld() unpacking section 3. */
#define G2_GETFLD_BAD_SEC4 11     /**< Error in g2_getfld() unpacking section 4. */
#define G2_GETFLD_BAD_SEC5 12     /**< Error in g2_getfld() unpacking section 5. */
#define G2_GETFLD_BAD_SEC6 13     /**< Error in g2_getfld() unpacking section 6. */
#define G2_GETFLD_BAD_SEC7 14     /**< Error in g2_getfld() unpacking section 7. */
#define G2_GETFLD_NO_BITMAP 17    /**< In g2_getfld() previous bitmap specified, yet none exists. */
#define G2_GRIBEND_MSG_INIT -1    /**< In g2_gribend() GRIB message was not initialized - call g2_create() first. */
#define G2_BAD_SEC -4             /**< Previous Section was unexpected. */
#define G2_UNPACK_BAD_SEC 2       /**< Bad section number in unpacking function. */
#define G2_UNPACK_NO_MEM 6        /**< Error allocating memory in unpack function. */
#define G2_UNPACK3_BAD_GDT 5      /**< In g2_unpack3(), undefined Grid Definition Template. */
#define G2_UNPACK4_BAD_PDT 5      /**< In g2_unpack4(), undefined Product Definition Template. */
#define G2_UNPACK5_BAD_DRT 7      /**< In g2_unpack5(), undefined Data Representation Template. */
#define G2_UNPACK6_BAD_BITMAP 4   /**< In g2_unpack6(), unrecognized pre-defined bit-map. */
#define G2_UNPACK7_CORRUPT_SEC 7  /**< In g2_unpack7(), corrupt section 7. */
#define G2_UNPACK7_WRONG_GDT 5    /**< In g2_unpack7(), need one of GDT 3.50 through 3.53 to decode DRT 5.51. */
#define G2_UNPACK7_BAD_DRT 4      /**< In g2_unpack7(), unrecognized Data Representation Template. */
#define G2_ADD_MSG_INIT -1        /**< GRIB message was not initialized - call g2_create() first. */
#define G2_ADD_MSG_COMPLETE -2    /**< GRIB message already complete. Cannot add new section. */
#define G2_BAD_SEC_COUNTS -3      /**< Sum of Section byte counts doesn't add to total byte count. */
#define G2_ADDFIELD_BAD_PDT -5    /**< In g2_addfield() could not find requested Product Definition Template. */
#define G2_ADDFIELD_BAD_GDS -6    /**< In g2_addfield() section 3 (GDS) not previously defined in message. */
#define G2_ADDFIELD_BAD_DRT -7    /**< In g2_addfield() unsupported Data Representationi Template. */
#define G2_ADDFIELD_BAD_BITMAP -8 /**< In g2_addfield() no bitmap in the GRIB message. */
#define G2_ADDFIELD_BAD_GDT -9    /**< In g2_addfield() GDT of one of 5.50 through 5.53 required when using DRT 5.51. */
#define G2_ADDFIELD_ERR -10       /**< In g2_addfield() error packing data field. */
#define G2_ADDGRID_BAD_GDT -5     /**< In g2_addgrid() Could not find requested Grid Definition Template. */
#define G2_JPCUNPACK_MEM 1        /**< In jpcunpack() or other unpack function: out of memory. */
#define G2_SPECUNPACK_TYPE -3     /**< In specunpack() Can't handle 64 or 128 bit floats. */
#define G2_JASPER_INIT -2         /**< In enc_jpeg2000()/dec_jpeg2000() error initializing jasper library. */
#define G2_JASPER_ENCODE -3       /**< In enc_jpeg2000() error encoding image with jasper. */
#define G2_JASPER_DECODE -3       /**< In dec_jpeg2000() error decoding image with jasper. */
#define G2_JASPER_DECODE_COLOR -5 /**< In dec_jpeg2000() decoded image had multiple color components. */

/* These are the new error codes. */
#define G2C_NO_ERROR 0       /**< No error. */
#define G2C_NOT_GRIB -50     /**< GRIB header not found. */
#define G2C_MSG_COMPLETE -51 /**< GRIB message already complete. */

#endif  /*  _grib2_H  */
